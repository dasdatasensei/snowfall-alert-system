version: "3.8"

services:
  # Lambda function packager
  lambda-packager:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - ~/.aws:/root/.aws:ro # For AWS CLI credentials (read-only)
    env_file:
      - .env.prod
    environment:
      - ENVIRONMENT=production
    command: >
      bash -c "cd /app &&
              make package &&
              make deploy"

  # PostgreSQL for snowfall data storage (optional)
  postgres:
    image: postgres:14-alpine
    restart: always
    ports:
      - "${DB_PORT}:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./infrastructure/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    deploy:
      resources:
        limits:
          memory: 512M

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:
