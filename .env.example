# Snowfall Alert System - Example Environment Configuration
# Copy this file to .env, .env.test, or .env.prod and fill in your actual values

#==============================================================================
# API KEYS (REQUIRED)
#==============================================================================

# OpenWeatherMap API - Primary weather data source
# Register at: https://openweathermap.org/api
OPENWEATHER_API_KEY=

# Weather API (formerly Weatherstack) - Secondary data verification
# Register at: https://weatherapi.com
WEATHERAPI_KEY=

#==============================================================================
# SLACK INTEGRATION (REQUIRED)
#==============================================================================

# Slack Webhook URL for notifications
# Create at: https://api.slack.com/apps > Your App > Incoming Webhooks
# Snow Alerts
SLACK_WEBHOOK_URL=

# Snow Alert Monitoring
SLACK_MONITORING_WEBHOOK_URL=

# Slack channel to post notifications (without the # symbol)
SLACK_CHANNEL=snow-alerts
SLACK_MONITORING_CHANNEL=snowalert-monitoring

#==============================================================================
# AWS CONFIGURATION
#==============================================================================

# AWS Region for Lambda deployment
AWS_REGION=us-west-2

# AWS Endpoint URL (for LocalStack)
AWS_ENDPOINT_URL=http://localstack:4566

# AWS Profile (if using AWS CLI with multiple profiles)
# AWS_PROFILE=personal

#==============================================================================
# DATABASE CONFIGURATION
#==============================================================================

# PostgreSQL credentials for Docker services
DB_USER=snowfall
DB_PASSWORD=
DB_NAME=snowfall_data
DB_PORT=5432

#==============================================================================
# LAMBDA CONFIGURATION
#==============================================================================

# Lambda function configuration
LAMBDA_FUNCTION_NAME=SnowfallAlertFunction
LAMBDA_RUNTIME=python3.9
LAMBDA_HANDLER=lambda_function.lambda_handler
LAMBDA_ROLE=arn:aws:iam::000000000000:role/lambda-role

# CloudWatch Event configuration
EVENT_RULE_NAME=SnowfallAlertTrigger
EVENT_SCHEDULE=rate(6 hours)
EVENT_RULE_ARN=

#==============================================================================
# MONITORING CONFIGURATION
#==============================================================================

# Grafana admin password
GRAFANA_PASSWORD=
GRAFANA_PORT=3000

# Prometheus configuration
PROMETHEUS_PORT=9090

# LocalStack configuration
LOCALSTACK_PORT=4566
LOCALSTACK_SERVICES=lambda,s3,cloudwatch,events,logs
LOCALSTACK_DEBUG=1
LOCALSTACK_TIMEOUT=30

#==============================================================================
# APPLICATION SETTINGS
#==============================================================================

# Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Snowfall check frequency in hours (used for testing; actual schedule set in CloudWatch)
CHECK_FREQUENCY=6

# Minimum hours between alerts for the same resort (prevent notification spam)
ALERT_COOLDOWN_HOURS=12

#==============================================================================
# RESORT CONFIGURATION
#==============================================================================

# Enable/disable specific resorts (comma-separated list of resort names)
# Leave empty to enable all resorts defined in code
ENABLED_RESORTS=Park City Mountain,Deer Valley,Alta,Snowbird

#==============================================================================
# SNOWFALL THRESHOLDS (in inches)
#==============================================================================

# These values can override the defaults in the code
THRESHOLD_LIGHT=2
THRESHOLD_MODERATE=6
THRESHOLD_HEAVY=12

#==============================================================================
# DEVELOPMENT SETTINGS (not used in production)
#==============================================================================

# Set to "true" to use mock data instead of calling real APIs (for testing)
USE_MOCK_DATA=false

# Set to "true" to skip sending actual Slack notifications
DISABLE_NOTIFICATIONS=false

# Adminer port for database management UI
ADMINER_PORT=8080